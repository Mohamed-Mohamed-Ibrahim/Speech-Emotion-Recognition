{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"![image.png](attachment:65b9293e-2d96-4789-9bdb-96ad17697d96.png)","metadata":{},"attachments":{"65b9293e-2d96-4789-9bdb-96ad17697d96.png":{"image/png":""}}},{"cell_type":"code","source":"!pip install ","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport re\n\nimport librosa\nimport librosa.display\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom IPython.display import Audio\n# from entropy import spectral_entropy\n# from keras import layers\n# from keras import models\n# from keras.utils import np_utils\n# from sklearn.model_selection import train_test_split\n# from sklearn.preprocessing import LabelEncoder, StandardScaler\n# from tensorflow.python.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n\nimport itertools\n\nimport warnings\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T11:40:50.479559Z","iopub.execute_input":"2025-05-11T11:40:50.479842Z","iopub.status.idle":"2025-05-11T11:40:50.485746Z","shell.execute_reply.started":"2025-05-11T11:40:50.479823Z","shell.execute_reply":"2025-05-11T11:40:50.484705Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# Paths to\nRavdess = \"../input/speech-emotion-recognition-en/Ravdess/audio_speech_actors_01-24\"\nCrema = \"../input/speech-emotion-recognition-en/Crema\"\nSavee = \"../input/speech-emotion-recognition-en/Savee\"\nTess = \"../input/speech-emotion-recognition-en/Tess\"\nprint(os.listdir(Ravdess))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T11:41:19.736711Z","iopub.execute_input":"2025-05-11T11:41:19.737062Z","iopub.status.idle":"2025-05-11T11:41:19.745045Z","shell.execute_reply.started":"2025-05-11T11:41:19.737038Z","shell.execute_reply":"2025-05-11T11:41:19.744096Z"}},"outputs":[{"name":"stdout","text":"['Actor_02', 'Actor_17', 'Actor_05', 'Actor_16', 'Actor_21', 'Actor_01', 'Actor_11', 'Actor_20', 'Actor_08', 'Actor_15', 'Actor_06', 'Actor_12', 'Actor_23', 'Actor_24', 'Actor_22', 'Actor_04', 'Actor_19', 'Actor_10', 'Actor_09', 'Actor_14', 'Actor_03', 'Actor_13', 'Actor_18', 'Actor_07']\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"ravdess_directory_list = os.listdir(Ravdess)\n\nemotion_df = []\n\nfor dir in ravdess_directory_list:\n    actor = os.listdir(os.path.join(Ravdess, dir))\n    for wav in actor:\n        info = wav.partition(\".wav\")[0].split(\"-\")\n        emotion = int(info[2])\n        emotion_df.append((emotion, os.path.join(Ravdess, dir, wav)))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T11:41:12.686833Z","iopub.execute_input":"2025-05-11T11:41:12.687170Z","iopub.status.idle":"2025-05-11T11:41:13.090622Z","shell.execute_reply.started":"2025-05-11T11:41:12.687146Z","shell.execute_reply":"2025-05-11T11:41:13.089724Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"Ravdess_df = pd.DataFrame.from_dict(emotion_df)\nRavdess_df.rename(columns={1 : \"Path\", 0 : \"Emotion\"}, inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T11:42:05.009597Z","iopub.execute_input":"2025-05-11T11:42:05.009928Z","iopub.status.idle":"2025-05-11T11:42:05.025433Z","shell.execute_reply.started":"2025-05-11T11:42:05.009903Z","shell.execute_reply":"2025-05-11T11:42:05.024478Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"Ravdess_df.Emotion.replace({1:'neutral', 2:'neutral', 3:'happy', 4:'sad', 5:'angry', 6:'fear', 7:'disgust', 8:'surprise'}, inplace=True)\nRavdess_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T11:42:05.284411Z","iopub.execute_input":"2025-05-11T11:42:05.284701Z","iopub.status.idle":"2025-05-11T11:42:05.299993Z","shell.execute_reply.started":"2025-05-11T11:42:05.284680Z","shell.execute_reply":"2025-05-11T11:42:05.298942Z"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"    Emotion                                               Path\n0  surprise  ../input/speech-emotion-recognition-en/Ravdess...\n1   neutral  ../input/speech-emotion-recognition-en/Ravdess...\n2   disgust  ../input/speech-emotion-recognition-en/Ravdess...\n3   disgust  ../input/speech-emotion-recognition-en/Ravdess...\n4   neutral  ../input/speech-emotion-recognition-en/Ravdess...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Emotion</th>\n      <th>Path</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>surprise</td>\n      <td>../input/speech-emotion-recognition-en/Ravdess...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>neutral</td>\n      <td>../input/speech-emotion-recognition-en/Ravdess...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>disgust</td>\n      <td>../input/speech-emotion-recognition-en/Ravdess...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>disgust</td>\n      <td>../input/speech-emotion-recognition-en/Ravdess...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>neutral</td>\n      <td>../input/speech-emotion-recognition-en/Ravdess...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"emotion_df = []\n\nfor wav in os.listdir(Crema):\n    info = wav.partition(\".wav\")[0].split(\"_\")\n    if info[2] == 'SAD':\n        emotion_df.append((\"sad\", Crema + \"/\" + wav))\n    elif info[2] == 'ANG':\n        emotion_df.append((\"angry\", Crema + \"/\" + wav))\n    elif info[2] == 'DIS':\n        emotion_df.append((\"disgust\", Crema + \"/\" + wav))\n    elif info[2] == 'FEA':\n        emotion_df.append((\"fear\", Crema + \"/\" + wav))\n    elif info[2] == 'HAP':\n        emotion_df.append((\"happy\", Crema + \"/\" + wav))\n    elif info[2] == 'NEU':\n        emotion_df.append((\"neutral\", Crema + \"/\" + wav))\n    else:\n        emotion_df.append((\"unknown\", Crema + \"/\" + wav))\n\n\nCrema_df = pd.DataFrame.from_dict(emotion_df)\nCrema_df.rename(columns={1 : \"Path\", 0 : \"Emotion\"}, inplace=True)\n\nCrema_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T11:42:24.850832Z","iopub.execute_input":"2025-05-11T11:42:24.851182Z","iopub.status.idle":"2025-05-11T11:42:24.964578Z","shell.execute_reply.started":"2025-05-11T11:42:24.851159Z","shell.execute_reply":"2025-05-11T11:42:24.963608Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"   Emotion                                               Path\n0  disgust  ../input/speech-emotion-recognition-en/Crema/1...\n1    happy  ../input/speech-emotion-recognition-en/Crema/1...\n2    happy  ../input/speech-emotion-recognition-en/Crema/1...\n3  disgust  ../input/speech-emotion-recognition-en/Crema/1...\n4  disgust  ../input/speech-emotion-recognition-en/Crema/1...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Emotion</th>\n      <th>Path</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>disgust</td>\n      <td>../input/speech-emotion-recognition-en/Crema/1...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>happy</td>\n      <td>../input/speech-emotion-recognition-en/Crema/1...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>happy</td>\n      <td>../input/speech-emotion-recognition-en/Crema/1...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>disgust</td>\n      <td>../input/speech-emotion-recognition-en/Crema/1...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>disgust</td>\n      <td>../input/speech-emotion-recognition-en/Crema/1...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"tess_directory_list = os.listdir(Tess)\n\nemotion_df = []\n\nfor dir in tess_directory_list:\n    for wav in os.listdir(os.path.join(Tess, dir)):\n        info = wav.partition(\".wav\")[0].split(\"_\")\n        emo = info[2]\n        if emo == \"ps\":\n            emotion_df.append((\"surprise\", os.path.join(Tess, dir, wav)))\n        else:\n            emotion_df.append((emo, os.path.join(Tess, dir, wav)))\n\n\nTess_df = pd.DataFrame.from_dict(emotion_df)\nTess_df.rename(columns={1 : \"Path\", 0 : \"Emotion\"}, inplace=True)\n\nTess_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T11:42:33.363099Z","iopub.execute_input":"2025-05-11T11:42:33.363392Z","iopub.status.idle":"2025-05-11T11:42:33.633338Z","shell.execute_reply.started":"2025-05-11T11:42:33.363373Z","shell.execute_reply":"2025-05-11T11:42:33.632363Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"  Emotion                                               Path\n0    fear  ../input/speech-emotion-recognition-en/Tess/YA...\n1    fear  ../input/speech-emotion-recognition-en/Tess/YA...\n2    fear  ../input/speech-emotion-recognition-en/Tess/YA...\n3    fear  ../input/speech-emotion-recognition-en/Tess/YA...\n4    fear  ../input/speech-emotion-recognition-en/Tess/YA...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Emotion</th>\n      <th>Path</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>fear</td>\n      <td>../input/speech-emotion-recognition-en/Tess/YA...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>fear</td>\n      <td>../input/speech-emotion-recognition-en/Tess/YA...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>fear</td>\n      <td>../input/speech-emotion-recognition-en/Tess/YA...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>fear</td>\n      <td>../input/speech-emotion-recognition-en/Tess/YA...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>fear</td>\n      <td>../input/speech-emotion-recognition-en/Tess/YA...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"savee_directiory_list = os.listdir(Savee)\n\nemotion_df = []\n\nfor wav in savee_directiory_list:\n    info = wav.partition(\".wav\")[0].split(\"_\")[1].replace(r\"[0-9]\", \"\")\n    emotion = re.split(r\"[0-9]\", info)[0]\n    if emotion=='a':\n        emotion_df.append((\"angry\", Savee + \"/\" + wav))\n    elif emotion=='d':\n        emotion_df.append((\"disgust\", Savee + \"/\" + wav))\n    elif emotion=='f':\n        emotion_df.append((\"fear\", Savee + \"/\" + wav))\n    elif emotion=='h':\n        emotion_df.append((\"happy\", Savee + \"/\" + wav))\n    elif emotion=='n':\n        emotion_df.append((\"neutral\", Savee + \"/\" + wav))\n    elif emotion=='sa':\n        emotion_df.append((\"sad\", Savee + \"/\" + wav))\n    else:\n        emotion_df.append((\"surprise\", Savee + \"/\" + wav))\n\n\nSavee_df = pd.DataFrame.from_dict(emotion_df)\nSavee_df.rename(columns={1 : \"Path\", 0 : \"Emotion\"}, inplace=True)\n\nSavee_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T11:42:43.322519Z","iopub.execute_input":"2025-05-11T11:42:43.322853Z","iopub.status.idle":"2025-05-11T11:42:43.339398Z","shell.execute_reply.started":"2025-05-11T11:42:43.322831Z","shell.execute_reply":"2025-05-11T11:42:43.338552Z"}},"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"   Emotion                                               Path\n0    happy  ../input/speech-emotion-recognition-en/Savee/J...\n1     fear  ../input/speech-emotion-recognition-en/Savee/K...\n2    happy  ../input/speech-emotion-recognition-en/Savee/D...\n3  disgust  ../input/speech-emotion-recognition-en/Savee/D...\n4    angry  ../input/speech-emotion-recognition-en/Savee/K...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Emotion</th>\n      <th>Path</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>happy</td>\n      <td>../input/speech-emotion-recognition-en/Savee/J...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>fear</td>\n      <td>../input/speech-emotion-recognition-en/Savee/K...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>happy</td>\n      <td>../input/speech-emotion-recognition-en/Savee/D...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>disgust</td>\n      <td>../input/speech-emotion-recognition-en/Savee/D...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>angry</td>\n      <td>../input/speech-emotion-recognition-en/Savee/K...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"df = pd.concat([Ravdess_df, Crema_df, Tess_df, Savee_df], axis=0)\ndf.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T11:43:04.713719Z","iopub.execute_input":"2025-05-11T11:43:04.714096Z","iopub.status.idle":"2025-05-11T11:43:04.722608Z","shell.execute_reply.started":"2025-05-11T11:43:04.714069Z","shell.execute_reply":"2025-05-11T11:43:04.721848Z"}},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"(12162, 2)"},"metadata":{}}],"execution_count":25},{"cell_type":"code","source":"%matplotlib inline\n\nplt.style.use(\"ggplot\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T11:43:15.513483Z","iopub.execute_input":"2025-05-11T11:43:15.513833Z","iopub.status.idle":"2025-05-11T11:43:15.519991Z","shell.execute_reply.started":"2025-05-11T11:43:15.513809Z","shell.execute_reply":"2025-05-11T11:43:15.519044Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"plt.title(\"Count of emotions:\")\nsns.countplot(x=df[\"Emotion\"])\nsns.despine(top=True, right=True, left=False, bottom=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T11:43:24.471561Z","iopub.execute_input":"2025-05-11T11:43:24.471848Z","iopub.status.idle":"2025-05-11T11:43:24.786456Z","shell.execute_reply.started":"2025-05-11T11:43:24.471828Z","shell.execute_reply":"2025-05-11T11:43:24.785483Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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0yP16sbf9N2FJrdhbC99d4GIiBqII0hEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQScn134EGpqanYtWsXMjIyUFRUhKlTp6J79+7i8hEjRmhcb/To0RgyZAgAYOLEiSgoKFBbHh0djeeff16cvnbtGuLj43HlyhXY2tpi4MCBGDp0aOMfEBERETVLBhWQ7t27B29vb/Tr1w+ffPJJreX//e9/1aZPnTqF1atXo0ePHmrzR4wYgQEDBojT5ubm4s9lZWWYP38+AgMDERsbi6ysLHzxxRewsrJSW4eIiIhaLoMKSKGhoQgNDdW6XKFQqE2fOHECnTp1QuvWrdXmW1hY1Gpb4+jRo1CpVJgwYQLkcjk8PDyQmZmJ3bt3MyARERERAAMLSPWhVCpx6tQpTJw4sdayHTt2YNu2bXB0dERYWBgGDRoEY2NjAEBaWho6dOgAufx/hx4cHIydO3eipKQE1tbWtbZXWVmJyspKcVomk8HCwkL8mehBPCe0Y220Y220Y200Y120a4zaNNuAdPjwYZibm6vdowQAzzzzDHx8fGBtbY1Lly5h8+bNKCoqwtixYwHcD1bOzs5q69SMNimVSo0Bafv27UhOThanfXx8sHjxYjg5OTXyUdHjwNXVVcc1cxu1H4ZI99o8/nStTV5qI3fEAPG80awhdbl78XIj9sTwNMY502wD0sGDB9GnTx+YmpqqzR88eLD4s5eXF+RyOdauXYvo6GiYmJjotK9hw4apbbcmmRYUFEClUum0TXp83bhxQ99dMFisjXa61qYljCHwvNGsIXVRNF43DNLDalPX8NQsA9KFCxeQm5uLt99++x/btmvXDlVVVSgoKICbmxsUCgWUSqVam5ppbfctmZiYaA1XgiDUo+fUEvCc0I610U7X2rSEgMTzRjPWRbvGqE2zfA7Szz//DF9fX3h7e/9j28zMTMhkMtja2gIA/P39ceHCBbWRn5SUFLi5uWm8vEZEREQtj0EFpPLycmRmZiIzMxMAkJ+fj8zMTBQWFoptysrK8Pvvv6Nfv3611k9LS8P333+PzMxM3Lx5E0eOHMHGjRvRp08fMfyEhYVBLpdj9erVyM7OxrFjx7Bnzx61S2hERETUshnUJbYrV65gzpw54nRCQgIAIDw8XPy22rFjxyAIAsLCwmqtL5fLcezYMWzduhWVlZVwdnbGoEGD1MKPpaUlZs6cifj4eEybNg02NjYYPnw4v+JPREREIoMKSJ06dUJSUtJD2wwYMEBrmPH19cWCBQv+cT9eXl6YO3euTn0kIiKix59BXWIjIiIiMgQMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQSDEhEREREEgxIRERERBIMSEREREQScn134EGpqanYtWsXMjIyUFRUhKlTp6J79+7i8pUrV+Lw4cNq6wQHB+PDDz8Up0tKSrB+/Xr89ddfkMlk6NGjB8aNGwdzc3OxzbVr1xAfH48rV67A1tYWAwcOxNChQ5v+AImIiKhZMKiAdO/ePXh7e6Nfv3745JNPNLYJCQnBhAkTxGm5XP0Qli9fjqKiIsycORNVVVVYtWoV1qxZg7feegsAUFZWhvnz5yMwMBCxsbHIysrCF198ASsrKwwYMKDpDo6IiIiaDYMKSKGhoQgNDX1oG7lcDoVCoXFZTk4OTp8+jUWLFsHPzw8AEBMTg0WLFmHMmDFwcHDA0aNHoVKpMGHCBMjlcnh4eCAzMxO7d+9mQCIiIiIABhaQ6iI1NRXjx4+HlZUVAgIC8PLLL8PGxgYAkJaWBisrKzEcAUBgYCBkMhnS09PRvXt3pKWloUOHDmojT8HBwdi5cydKSkpgbW1da5+VlZWorKwUp2UyGSwsLMSfiR7Ec0I71kY71kY71kYz1kW7xqhNswpIISEh6NGjB5ydnZGXl4fNmzdj4cKFWLBgAYyMjKBUKmFra6u2jrGxMaytraFUKgEASqUSzs7Oam1qRqSUSqXGgLR9+3YkJyeL0z4+Pli8eDGcnJwa9wDpseDq6qrjmrmN2g9DpHttHn+61iYvtZE7YoB43mjWkLrcvXi5EXtieBrjnGlWAal3797iz56envDy8sLkyZNx/vx5BAYGNtl+hw0bhsGDB4vTNcm0oKAAKpWqyfZLzdONGzf03QWDxdpop2ttWsIYAs8bzRpSF0XjdcMgPaw2dQ1PzSogSbVu3Ro2NjbIy8tDYGAgFAoFbt++rdamqqoKJSUl4iiRQqEQR5Nq1Exru7fJxMQEJiYmGpcJgtCQQ6DHEM8J7Vgb7XStTUsISDxvNGNdtGuM2jTr5yD9/fffKCkpgb29PQDA398fpaWluHr1qtjm3LlzEAQBbdu2FdtcuHBBbeQnJSUFbm5uGi+vERERUctjUAGpvLwcmZmZyMzMBADk5+cjMzMThYWFKC8vx1dffYW0tDTk5+fj7NmzWLJkCVxcXBAcHAwAcHd3R0hICNasWYP09HRcvHgR69evx5NPPgkHBwcAQFhYGORyOVavXo3s7GwcO3YMe/bsUbuERkRERC2bQV1iu3LlCubMmSNOJyQkAADCw8PFZxYdPnwYpaWlcHBwQFBQEKKiotQuf02ZMgXx8fGYO3eu+KDImJgYcbmlpSVmzpyJ+Ph4TJs2DTY2Nhg+fDi/4k9EREQigwpInTp1QlJSktblDz4xWxtra2vxoZDaeHl5Ye7cufXuHxEREbUMBnWJjYiIiMgQMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERScj13YEHpaamYteuXcjIyEBRURGmTp2K7t27AwBUKhUSExNx6tQp5Ofnw9LSEoGBgYiOjoaDg4O4jYkTJ6KgoEBtu9HR0Xj++efF6WvXriE+Ph5XrlyBra0tBg4ciKFDhz6SYyQiIiLDZ1AB6d69e/D29ka/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apSTk4MDBw7gk08+wbRp0xASEtJYfSUiIiJ6JHQOSNu2bYOXlxfmzJmj9iLYrl27YuDAgfj3v/+NrVu3MiARERFRs6Pzq0aysrIQHh6uFo5qmJubIyIiAllZWQ3qHBEREZE+6ByQTExMHvruspKSEq3PDiIiIiIyZDoHpICAAPzwww/ii2IfdPnyZezZsweBgYEN6hwRERGRPuh8D9Lo0aPx4YcfYtasWWjbti3c3NwAALm5uUhPT4ednR1GjRrVaB0lIiIielR0DkjOzs745JNPsH37dpw+fRrHjh0DcP85SM8++yyef/552NnZNVpHiYiIiB4VnQNSVVUVTExM8Oqrr2pcXlZWhqqqKhgbG+u6CyIiIiK90PkepC+//BKzZs3SunzWrFniq0KIiIiImhOdA9Lp06fRo0cPrct79uyJU6dO6bp5IiIiIr3ROSAVFRXBwcFB63J7e3vcunVL180TERER6Y3OAcna2hq5ublal1+/fh0WFha6bp6IiIhIb3QOSCEhIdi/fz8yMjJqLbt69Sr279+P0NDQBnWOiIiISB90/hZbVFQUTp8+jRkzZqBLly7w8PAAAGRnZ+Ovv/6Cra0toqKiGq2jRERERI+KzgHJwcEBH330Eb7++mv8+eefOHHiBADAwsICYWFhGDly5EPvUSIiIiIyVDoHJOD+jdiTJk2CIAi4ffs2AMDW1hYymaxROkdERESkDw0KSDVkMhmfmk1ERESPDZ1v0iYiIiJ6XDEgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUkwIBERERFJMCARERERSTAgEREREUnI9d2B+po4cSIKCgpqzX/66acxfvx4xMXFITU1VW3ZgAED8K9//UucLiwsxNq1a3H+/HmYm5sjPDwc0dHRMDY2bvL+ExERkeFrdgFp0aJFqK6uFqezsrIwf/589OrVS5zXv39/REVFidOmpqbiz9XV1Vi0aBEUCgXmz5+PoqIirFixAsbGxoiOjn40B0FEREQGrdldYrO1tYVCoRB/nTx5Eq1bt0bHjh3FNmZmZmptLC0txWVnzpxBTk4OJk+eDG9vb4SGhiIqKgr79u2DSqXSxyERERGRgWl2I0gPUqlU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\n"},"metadata":{}}],"execution_count":27},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}